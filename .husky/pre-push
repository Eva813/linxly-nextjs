# ===============================
# Professional DevOps Pre-push Hook
# Fast-fail strategy: type-check → code review → build
# ===============================

echo "🚀 Running professional CI checks with fast-fail strategy..."

# Step 1: Type Check (Fast - ~10-30s)
echo ""
echo "🔧 Step 1/3: TypeScript Type Check"
echo "⏰ Running type check..."
if ! npm run type-check; then
  echo ""
  echo "❌ Type check failed! Please fix TypeScript errors before pushing."
  echo "💡 Run 'npm run type-check' to see detailed errors."
  exit 1
fi
echo "✅ Type check passed!"

# Step 2: Claude Code Review (Medium - ~30-60s) 
echo ""
echo "🤖 Step 2/3: AI Code Review with Specialized Prompts"

# Check if Claude CLI is available first
if ! command -v claude &> /dev/null; then
  echo "⚠️  Claude CLI not found. Skipping Claude Code Review."
  echo "💡 To enable AI code review: install Claude Code CLI"
  echo "✅ Code review skipped!"
else
  echo "📝 Analyzing your changes with Claude..."
  
  # Get changed files (handle different scenarios)
  remote_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  if [[ -z "$remote_branch" ]]; then
    remote_branch="main"
  fi
  
  # Try different git diff strategies (remove file limit for Next.js projects)
  if git rev-parse --verify "origin/$remote_branch" >/dev/null 2>&1; then
    changed_files=$(git diff --name-only "origin/$remote_branch"...HEAD)
  else
    # Fallback for first push or when remote branch doesn't exist
    changed_files=$(git diff --cached --name-only)
  fi
  
  if [[ -z "$changed_files" ]]; then
    echo "ℹ️  No files to review."
  else
    # Fix file count display (remove wc -l spaces)
    file_count=$(echo "$changed_files" | wc -l | tr -d ' ')
    echo "📊 Found $file_count files to review"
    
    # Debug: Show files found with categories
    echo "🔍 Files found for review:"
    echo "$changed_files" | sed 's/^/  - /'
    echo ""
    
    # Show file categorization preview
    echo "📂 File categorization preview:"
    while IFS= read -r file; do
      if [[ "$file" =~ \.(js|jsx|ts|tsx)$ ]]; then
        if [[ "$file" =~ ^src/app/api/ ]] || [[ "$file" =~ ^pages/api/ ]] || [[ "$file" =~ ^src/server/ ]] || [[ "$file" =~ ^src/middleware ]] || [[ "$file" =~ middleware\.ts$ ]]; then
          echo "  📊 Backend: $file"
        elif [[ "$file" =~ ^src/(app|components|hooks|stores)/ ]] || [[ "$file" =~ ^src/app/.+\.tsx?$ ]] || [[ "$file" =~ ^pages/.+\.tsx?$ ]] || [[ "$file" =~ \.(tsx)$ ]]; then
          echo "  🎨 Frontend: $file"
        elif [[ "$file" =~ ^src/(shared|types|utils|lib)/ ]]; then
          echo "  🔧 Shared: $file"
        else
          echo "  📋 Other JS/TS: $file"
        fi
      else
        echo "  ⚪ Non-code: $file"
      fi
    done <<< "$changed_files"
    echo ""
    
    # Filter for JavaScript/TypeScript files only
    js_ts_files=""
    while IFS= read -r file; do
      if [[ "$file" =~ \.(js|jsx|ts|tsx)$ ]]; then
        if [[ -n "$js_ts_files" ]]; then
          js_ts_files="$js_ts_files"$'\n'"$file"
        else
          js_ts_files="$file"
        fi
      fi
    done <<< "$changed_files"
    
    if [[ -z "$js_ts_files" ]]; then
      echo "ℹ️  No JavaScript/TypeScript files to review."
      echo "✅ Skipping code review - no code files changed."
    else
      js_ts_count=$(echo "$js_ts_files" | wc -l | tr -d ' ')
      echo "📋 Reviewing $js_ts_count JavaScript/TypeScript files:"
      echo ""
      
      # Review each file with appropriate prompt (avoid subshell issues)
      review_failed=false
      actual_reviews_conducted=false
      
      while IFS= read -r file; do
        echo "🔍 Reviewing: $file"
        actual_reviews_conducted=true
        
        # Enhanced Next.js file path detection
        if [[ "$file" =~ ^src/app/api/ ]] || [[ "$file" =~ ^pages/api/ ]] || [[ "$file" =~ ^src/server/ ]] || [[ "$file" =~ ^src/middleware ]] || [[ "$file" =~ middleware\.ts$ ]]; then
          # Backend files - use backend prompt
          echo "  📊 Using Backend/API review prompt"
          backend_prompt="You are tasked with reviewing a Node.js backend codebase that uses Firebase/Firestore, with Next.js API routes. Focus on API security, database optimization, error handling, performance, and adherence to Node.js and Firebase conventions. Provide clear, actionable feedback with reasoning."
          if ! claude --print --append-system-prompt "$backend_prompt" "Please review this file for backend best practices, security, and performance:" < "$file"; then
            echo "  ❌ Review failed for $file"
            review_failed=true
          fi
        elif [[ "$file" =~ ^src/(app|components|hooks|stores)/ ]] || [[ "$file" =~ ^src/app/.+\.tsx?$ ]] || [[ "$file" =~ ^pages/.+\.tsx?$ ]] || [[ "$file" =~ \.(tsx)$ ]]; then
          # Frontend files (Next.js App Router + Pages Router) - use frontend prompt  
          echo "  🎨 Using Frontend/React review prompt"
          frontend_prompt="You are tasked with reviewing a Next.js/React frontend codebase. Focus on React best practices, Next.js optimization, component design, performance, accessibility, and TypeScript usage. Provide clear, actionable feedback."
          if ! claude --print --append-system-prompt "$frontend_prompt" "Please review this file for frontend best practices, performance, and maintainability:" < "$file"; then
            echo "  ❌ Review failed for $file"
            review_failed=true
          fi
        elif [[ "$file" =~ ^src/(shared|types|utils|lib)/ ]]; then
          # Shared files - use brief review
          echo "  🔧 Using general review"
          if ! claude --print "Please review this file for code quality, TypeScript usage, and best practices:" < "$file"; then
            echo "  ❌ Review failed for $file"
            review_failed=true
          fi
        else
          # Other files - use brief review
          echo "  📋 Using brief review"  
          if ! claude --print "Please review this file for code quality and best practices:" < "$file"; then
            echo "  ❌ Review failed for $file"
            review_failed=true
          fi
        fi
        echo "  ✅ Review completed for $file"
        echo ""
      done <<< "$js_ts_files"
      
      # Check if any reviews failed
      if [[ "$review_failed" == true ]]; then
        echo "❌ Some code reviews failed. Please check the output above."
        exit 1
      fi
      
      # Only prompt for confirmation if actual reviews were conducted
      if [[ "$actual_reviews_conducted" == true ]]; then
        echo "🔍 Claude Code Review completed!"
        echo "💡 Review the suggestions above before pushing."
        echo ""
        read -p "Do you want to continue with the push? (y/N): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          echo "❌ Push cancelled. Please review and fix the issues."
          exit 1
        fi
      fi
    fi
  fi
fi

echo "✅ Code review completed!"

# Step 3: Build (Slow - ~1-5min)
echo ""
echo "🏗️  Step 3/3: Production Build"
echo "⏰ Running build (this may take a few minutes)..."
if ! npm run build; then
  echo ""
  echo "❌ Build failed! Please fix build errors before pushing."
  echo "💡 Run 'npm run build' locally to debug issues."
  exit 1
fi
echo "✅ Build successful!"

echo ""
echo "🎉 All checks passed! Ready to push."
echo "📊 Summary: ✅ Type-check → ✅ Code Review → ✅ Build"