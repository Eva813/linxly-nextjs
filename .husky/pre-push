# ===============================
# Professional DevOps Pre-push Hook
# Fast-fail strategy: type-check ‚Üí code review ‚Üí build
# ===============================

echo "üöÄ Running professional CI checks with fast-fail strategy..."

# Step 1: Type Check (Fast - ~10-30s)
echo ""
echo "üîß Step 1/3: TypeScript Type Check"
echo "‚è∞ Running type check..."
if ! npm run type-check; then
  echo ""
  echo "‚ùå Type check failed! Please fix TypeScript errors before pushing."
  echo "üí° Run 'npm run type-check' to see detailed errors."
  exit 1
fi
echo "‚úÖ Type check passed!"

# Step 2: Claude Code Review (Medium - ~30-60s) 
echo ""
echo "ü§ñ Step 2/3: AI Code Review with Specialized Prompts"

# Check if Claude CLI is available first
if ! command -v claude &> /dev/null; then
  echo "‚ö†Ô∏è  Claude CLI not found. Skipping Claude Code Review."
  echo "üí° To enable AI code review: install Claude Code CLI"
  echo "‚úÖ Code review skipped!"
else
  echo "üìù Analyzing your changes with Claude..."
  
  # Get changed files (handle different scenarios)
  remote_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  if [[ -z "$remote_branch" ]]; then
    remote_branch="main"
  fi
  
  # Try different git diff strategies
  if git rev-parse --verify "origin/$remote_branch" >/dev/null 2>&1; then
    changed_files=$(git diff --name-only "origin/$remote_branch"...HEAD | head -10)
  else
    # Fallback for first push or when remote branch doesn't exist
    changed_files=$(git diff --cached --name-only | head -10)
  fi
  
  if [[ -z "$changed_files" ]]; then
    echo "‚ÑπÔ∏è  No files to review."
  else
    # Fix file count display (remove wc -l spaces)
    file_count=$(echo "$changed_files" | wc -l | tr -d ' ')
    echo "üìä Found $file_count files to review"
    
    # Debug: Show files found
    echo "üîç Files found for review:"
    echo "$changed_files" | sed 's/^/  - /'
    echo ""
    
    # Filter for JavaScript/TypeScript files only
    js_ts_files=""
    while IFS= read -r file; do
      if [[ "$file" =~ \.(js|jsx|ts|tsx)$ ]]; then
        if [[ -n "$js_ts_files" ]]; then
          js_ts_files="$js_ts_files"$'\n'"$file"
        else
          js_ts_files="$file"
        fi
      fi
    done <<< "$changed_files"
    
    if [[ -z "$js_ts_files" ]]; then
      echo "‚ÑπÔ∏è  No JavaScript/TypeScript files to review."
    else
      js_ts_count=$(echo "$js_ts_files" | wc -l | tr -d ' ')
      echo "üìã Reviewing $js_ts_count JavaScript/TypeScript files:"
      echo ""
      
      # Review each file with appropriate prompt (avoid subshell issues)
      review_failed=false
      while IFS= read -r file; do
        echo "üîç Reviewing: $file"
        
        # Intelligent prompt selection based on file path
        if [[ "$file" =~ ^src/app/api/ ]] || [[ "$file" =~ ^src/server/ ]] || [[ "$file" =~ ^src/middleware ]] || [[ "$file" =~ middleware\.ts$ ]]; then
          # Backend files - use backend prompt
          echo "  üìä Using Backend/API review prompt"
          if ! claude code review "$file" --prompt-file=".claude/commands/backend/code-review.md"; then
            echo "  ‚ùå Review failed for $file"
            review_failed=true
          fi
        elif [[ "$file" =~ ^src/(app|components|hooks|stores)/ ]] || [[ "$file" =~ \.(tsx)$ ]]; then
          # Frontend files - use frontend prompt  
          echo "  üé® Using Frontend/React review prompt"
          if ! claude code review "$file" --prompt-file=".claude/commands/frontend/code-review.md"; then
            echo "  ‚ùå Review failed for $file"
            review_failed=true
          fi
        elif [[ "$file" =~ ^src/(shared|types|utils)/ ]]; then
          # Shared files - use brief review
          echo "  üîß Using general review"
          if ! claude code review "$file" --brief; then
            echo "  ‚ùå Review failed for $file"
            review_failed=true
          fi
        else
          # Other files - use brief review
          echo "  üìã Using brief review"  
          if ! claude code review "$file" --brief; then
            echo "  ‚ùå Review failed for $file"
            review_failed=true
          fi
        fi
        echo "  ‚úÖ Review completed for $file"
        echo ""
      done <<< "$js_ts_files"
      
      # Check if any reviews failed
      if [[ "$review_failed" == true ]]; then
        echo "‚ùå Some code reviews failed. Please check the output above."
        exit 1
      fi
    fi
    
    echo "üîç Claude Code Review completed!"
    echo "üí° Review the suggestions above before pushing."
    echo ""
    read -p "Do you want to continue with the push? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "‚ùå Push cancelled. Please review and fix the issues."
      exit 1
    fi
  fi
fi

echo "‚úÖ Code review completed!"

# Step 3: Build (Slow - ~1-5min)
echo ""
echo "üèóÔ∏è  Step 3/3: Production Build"
echo "‚è∞ Running build (this may take a few minutes)..."
if ! npm run build; then
  echo ""
  echo "‚ùå Build failed! Please fix build errors before pushing."
  echo "üí° Run 'npm run build' locally to debug issues."
  exit 1
fi
echo "‚úÖ Build successful!"

echo ""
echo "üéâ All checks passed! Ready to push."
echo "üìä Summary: ‚úÖ Type-check ‚Üí ‚úÖ Code Review ‚Üí ‚úÖ Build"